####################################
## Array_i Deduplication: Keep unique occurrences of each object
##########################################################################
## For every element in the array_i, check every element after it. 
## Replace all duplicates with epsilon
##########################################################################


.pragma k=5 r=17 beta=8
.pragma PQ=4281167959.4271299633
.pragma PQ=18299379327617480707.18345258783657292909
.pragma PQ=338871469111127928412308213206819656391.338531414912581056934822037249894061881
.pragma PQ=115689526107095890311249333520175779978137070980169508677335528535095435701957.115509443392406915656501893779637949187966713758992043305916442498716409678501
.pragma PQ=13392849694255970315601419090152597688339809774933571293865724091737666496951381207429127235940384883608845778583380210687006370486238723021460371010217257.13403952390292880134486926689236901739298695038033079040680862117777593853851234125818128702776151240584166261477766002390185782669746209391687589482784501
.pragma io=ts incdir=../lib/


.mov21 header_ptr size

.mov _o0 i
outer_loop:                 # for (int i = 0; i < size ; i++) {
    .mov _o1 j
    .add i j                # j = i + 1
    .mov array_i array_j
    .inc array_j
    inner_loop:             #   for (int j = i+1 ; j < size ; j++) {
        .mov21 array_i x
        .mov21 array_j y

        .seq x y eq             #   int eq = (array[i] == array[j]) ? 1 : 0;
        .smul eq epsilon tmp    #   tmp = eq * epsilon
        .mov _s1 neq
        eq neq;                 #   neq = 1 - eq
        .smul neq y tmp2        #   tmp2 = neq * array[j]
        .add tmp2 tmp           #   tmp += tmp2
        .mov12 tmp array_j      #   array[j] = tmp

        .inc j
        .inc array_j

        .mov j tmp
        .add _o1 tmp
    size tmp inner_loop     # } if (j - size <= 0) goto inner_loop
    # .ifneq j size inner_loop #  }

    .inc i
    .inc array_i
.ifneq i size outer_loop    # }

# Print the results
.mov ptr array_i
.mov _o0 i
loop:
    .mov21 array_i x
    # .outd x # Print decrypted result
    .outd x
    .inc array_i
    .inc i
.ifneq i size loop

.halt

# variables
. header_ptr:header_start
. ptr:db_start

. array_i:db_start array_j:db_start
. i:0 j:0
. size:0 x:~0 y:~0 
. tmp:~0 tmp2:~0 eq:~0 neq:~0

. _o0:0
. epsilon:~999

# data
header_start:
.include "../deduplication/db/h32.opn"
header_end:
header_size: (header_end - header_start)

db_start:
.include datax "../deduplication/db/32rand_N1024.db.sec"
db_end:
db_size: (db_end - db_start)

.include "secure.lib"


