####################################
## Fibonacci numbers
## 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1587 ...
##########################################################################
## Compute the Fibonacci of the input number (num).
##########################################################################
## Iterate up to a maximum number (to avoid side channel attacks)
## and keep the result of the requested number.
##########################################################################

.pragma k=5 r=17 beta=8
# .pragma k=5 r=17 beta=16
# .pragma k=5 r=17 beta=24

.pragma PQ=239.251
# .pragma PQ=63199.64567   
# .pragma PQ=4281167959.4271299633
# .pragma PQ=18299379327617480707.18345258783657292909
# .pragma PQ=338871469111127928412308213206819656391.338531414912581056934822037249894061881
# .pragma PQ=115689526107095890311249333520175779978137070980169508677335528535095435701957.115509443392406915656501893779637949187966713758992043305916442498716409678501
# .pragma PQ=13392849694255970315601419090152597688339809774933571293865724091737666496951381207429127235940384883608845778583380210687006370486238723021460371010217257.13403952390292880134486926689236901739298695038033079040680862117777593853851234125818128702776151240584166261477766002390185782669746209391687589482784501
.pragma io=ts incdir=../lib/

.mov _o0 iter                       # iter = 0
.mov _s0 i                          # i = ~0
fib_loop:
    .add _o1 iter                   # iter++
    .add _s1 i                      # i++

    .seq i input x                  # x = i == input 
    .smul x fi y                    # y = x * fi
    .add y result                   # result += y

    .mov f1 fi             
    .add f2 fi                      # fi = fi + f2
    .mov f2 f1                      # f1 = f2
    .mov fi f2                      # f2 = fi
.ifneq iter maxnum fib_loop
.out result
.outd result
.halt

. maxnum:50 # the maximum factorial the program can compute
. _o0:0
# variables
. iter:0
. i:~0 f1:~0 f2:~1 fi:~1 
. x:~0 y:~0 result:~0

# the Fibonacci number to compute
input:;.include datax "../fibonacci/input.sec"

.include "secure.lib"

# fibonnaci(n):
# f1 = 0; f2 =1;
# for (i = 0; i < n; i ++):
#   fi = f1 + f2; f1 = f2; f2 = fi;
# print fi
