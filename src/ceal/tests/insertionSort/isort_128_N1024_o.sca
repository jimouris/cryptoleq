####################################
## Insertion sort ascending order
## Array:  4  2  5  7  1  0  11  3  9  8  4  5  6  1  2  3  7  9  10  2
## Output: 0  1  1  2  2  2  3  3  4  4  5  5  6  7  7  8  9  9  10  11 
##########################################################################

.pragma k=5 r=17 beta=16
.pragma PQ=13392849694255970315601419090152597688339809774933571293865724091737666496951381207429127235940384883608845778583380210687006370486238723021460371010217257.13403952390292880134486926689236901739298695038033079040680862117777593853851234125818128702776151240584166261477766002390185782669746209391687589482784501
.pragma io=ts incdir=../lib/


.mov _o1 i                     # i = 1;
outer_loop:
    .mov i j                    #   j = i;
    inner_loop:
        .mov ptr_bu ptr
        .add j ptr
        .mov ptr ptr2
        .dec ptr2               #        j--;
        
        #  minswp(&array[j], &array[j-1]);
        .mov21 ptr x
        .mov21 ptr2 y
        .minswp y x
        .mov12 x ptr
        .mov12 y ptr2

        .dec j                  #       j--;
    .ifneq j _o0 inner_loop   #   if (j != 0) goto inner_loop;
    .inc i                      #   i++;
.ifneq i len outer_loop         # if (i != n) goto outer_loop;

.mov ptr_bu ptr
.mov _o0 i
loop:
    .mov21 ptr x
    .out x
    .inc ptr
    .inc i
.ifneq i len loop

.halt

# variables
. ptr:db_start
. ptr2:db_start
. ptr_bu:db_start
. i:0 j:0 x:0 y:0
. min:0 max:0
. _o0:0 

. len:128

db_start:
.include "../insertionSort/db/128rand16bit"
db_end:
db_size: (db_end - db_start)

.include "secure.lib"


# Insertion sort pseudocode
# for (i = 1 ; i < n; i++) {
#     j = i;
#     while (j != 0) {
#         minswp(&array[j-1], &array[j]);
#         j--;
#     }
# }
# print results